
Embedded Systems 1 Pruefungsprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002418  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000098  08002634  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002634  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c54  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179e  00000000  00000000  00026d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  000284f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ee  00000000  00000000  00028b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175d6  00000000  00000000  00029076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000937d  00000000  00000000  0004064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008217c  00000000  00000000  000499c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d90  00000000  00000000  000cbb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000cd8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800250c 	.word	0x0800250c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800250c 	.word	0x0800250c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <buttonReader>:
gpioButtons buttons[2] = {
        {rightBlink_GPIO_Port, rightBlink_Pin},
        {leftBlink_GPIO_Port, leftBlink_Pin},
};

uint8_t buttonReader() {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
    static uint8_t oldButton = 0;

	if (debounceButton(buttons[0].port, buttons[0].pin)) {
 8000162:	4b27      	ldr	r3, [pc, #156]	; (8000200 <buttonReader+0xa4>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4a26      	ldr	r2, [pc, #152]	; (8000200 <buttonReader+0xa4>)
 8000168:	8892      	ldrh	r2, [r2, #4]
 800016a:	4611      	mov	r1, r2
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f849 	bl	8000204 <debounceButton>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d019      	beq.n	80001ac <buttonReader+0x50>
        uint32_t pressTime = HAL_GetTick();
 8000178:	f000 fc94 	bl	8000aa4 <HAL_GetTick>
 800017c:	6038      	str	r0, [r7, #0]
        while (HAL_GPIO_ReadPin(buttons[0].port, buttons[0].pin) == false) {
 800017e:	e008      	b.n	8000192 <buttonReader+0x36>
            if ((HAL_GetTick() - pressTime) > LONG_PRESS_TIME) {
 8000180:	f000 fc90 	bl	8000aa4 <HAL_GetTick>
 8000184:	4602      	mov	r2, r0
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	1ad3      	subs	r3, r2, r3
 800018a:	2bc8      	cmp	r3, #200	; 0xc8
 800018c:	d901      	bls.n	8000192 <buttonReader+0x36>
                return rightHold;
 800018e:	2302      	movs	r3, #2
 8000190:	e032      	b.n	80001f8 <buttonReader+0x9c>
        while (HAL_GPIO_ReadPin(buttons[0].port, buttons[0].pin) == false) {
 8000192:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <buttonReader+0xa4>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <buttonReader+0xa4>)
 8000198:	8892      	ldrh	r2, [r2, #4]
 800019a:	4611      	mov	r1, r2
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fef3 	bl	8000f88 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0eb      	beq.n	8000180 <buttonReader+0x24>
            }
        }
        return rightClick;
 80001a8:	2301      	movs	r3, #1
 80001aa:	e025      	b.n	80001f8 <buttonReader+0x9c>
    }

    if (debounceButton(buttons[1].port, buttons[1].pin)) {
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <buttonReader+0xa4>)
 80001ae:	689b      	ldr	r3, [r3, #8]
 80001b0:	4a13      	ldr	r2, [pc, #76]	; (8000200 <buttonReader+0xa4>)
 80001b2:	8992      	ldrh	r2, [r2, #12]
 80001b4:	4611      	mov	r1, r2
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 f824 	bl	8000204 <debounceButton>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d019      	beq.n	80001f6 <buttonReader+0x9a>
        uint32_t pressTime = HAL_GetTick();
 80001c2:	f000 fc6f 	bl	8000aa4 <HAL_GetTick>
 80001c6:	6078      	str	r0, [r7, #4]
        while (HAL_GPIO_ReadPin(buttons[1].port, buttons[1].pin) == false) {
 80001c8:	e008      	b.n	80001dc <buttonReader+0x80>
            if ((HAL_GetTick() - pressTime) > LONG_PRESS_TIME) {
 80001ca:	f000 fc6b 	bl	8000aa4 <HAL_GetTick>
 80001ce:	4602      	mov	r2, r0
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	1ad3      	subs	r3, r2, r3
 80001d4:	2bc8      	cmp	r3, #200	; 0xc8
 80001d6:	d901      	bls.n	80001dc <buttonReader+0x80>
                return leftClick;
 80001d8:	2303      	movs	r3, #3
 80001da:	e00d      	b.n	80001f8 <buttonReader+0x9c>
        while (HAL_GPIO_ReadPin(buttons[1].port, buttons[1].pin) == false) {
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <buttonReader+0xa4>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <buttonReader+0xa4>)
 80001e2:	8992      	ldrh	r2, [r2, #12]
 80001e4:	4611      	mov	r1, r2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fece 	bl	8000f88 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0eb      	beq.n	80001ca <buttonReader+0x6e>
            }
        }
        return leftHold;
 80001f2:	2304      	movs	r3, #4
 80001f4:	e000      	b.n	80001f8 <buttonReader+0x9c>
    }

    return noAction;
 80001f6:	2300      	movs	r3, #0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000000 	.word	0x20000000

08000204 <debounceButton>:


static bool debounceButton(GPIO_TypeDef* port, uint16_t pin) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	807b      	strh	r3, [r7, #2]
    if (HAL_GPIO_ReadPin(port, pin) == false) {
 8000210:	887b      	ldrh	r3, [r7, #2]
 8000212:	4619      	mov	r1, r3
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f000 feb7 	bl	8000f88 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d115      	bne.n	800024c <debounceButton+0x48>
        uint32_t pressTime = HAL_GetTick();
 8000220:	f000 fc40 	bl	8000aa4 <HAL_GetTick>
 8000224:	60f8      	str	r0, [r7, #12]
        if (HAL_GetTick() - pressTime < DEBOUNCE_TIME) {
 8000226:	f000 fc3d 	bl	8000aa4 <HAL_GetTick>
 800022a:	4602      	mov	r2, r0
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	2b31      	cmp	r3, #49	; 0x31
 8000232:	d809      	bhi.n	8000248 <debounceButton+0x44>
            if (HAL_GPIO_ReadPin(port, pin) != false) {
 8000234:	887b      	ldrh	r3, [r7, #2]
 8000236:	4619      	mov	r1, r3
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 fea5 	bl	8000f88 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <debounceButton+0x44>
                return 0;
 8000244:	2300      	movs	r3, #0
 8000246:	e002      	b.n	800024e <debounceButton+0x4a>
            }
        }
        return true;
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <debounceButton+0x4a>
    }
    return false;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <controller>:
    rightHold = 2,
    leftClick = 3,
    leftHold = 4
};

void controller(uint8_t button) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
    static uint8_t currentButton = 0;
    static uint8_t nextButton = 0;
    static uint8_t cycleCount = 0;

    // active Period
    if(getActivePeriod()){
 8000262:	f000 f97f 	bl	8000564 <getActivePeriod>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00a      	beq.n	8000282 <controller+0x2a>
        // button not pressed - current button stays the same - skip
        // same button pressed - current button stays the same - skip
        // another button pressed - safe in buffer
        if(currentButton != button && button != noButton){
 800026c:	4b54      	ldr	r3, [pc, #336]	; (80003c0 <controller+0x168>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	429a      	cmp	r2, r3
 8000274:	d005      	beq.n	8000282 <controller+0x2a>
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d002      	beq.n	8000282 <controller+0x2a>
            nextButton = button;
 800027c:	4a51      	ldr	r2, [pc, #324]	; (80003c4 <controller+0x16c>)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	7013      	strb	r3, [r2, #0]
        }
    }

    // non-active period
    if(!getActivePeriod()){
 8000282:	f000 f96f 	bl	8000564 <getActivePeriod>
 8000286:	4603      	mov	r3, r0
 8000288:	f083 0301 	eor.w	r3, r3, #1
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d013      	beq.n	80002ba <controller+0x62>
        // button 0 - skip
        // button not 0
        if(button != noButton) {
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <controller+0x46>
            currentButton = button;
 8000298:	4a49      	ldr	r2, [pc, #292]	; (80003c0 <controller+0x168>)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	7013      	strb	r3, [r2, #0]
        }
        // next button set, change direction
        if(nextButton!=noButton){
 800029e:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <controller+0x16c>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d009      	beq.n	80002ba <controller+0x62>
            currentButton = nextButton;
 80002a6:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <controller+0x16c>)
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <controller+0x168>)
 80002ac:	701a      	strb	r2, [r3, #0]
            // reset next button
            nextButton = noButton;
 80002ae:	4b45      	ldr	r3, [pc, #276]	; (80003c4 <controller+0x16c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
            // reset cycleCount
            cycleCount = cycleInit;
 80002b4:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <controller+0x170>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
        }
    }

    switch(currentButton){
 80002ba:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <controller+0x168>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d873      	bhi.n	80003ac <controller+0x154>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <controller+0x74>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002dd 	.word	0x080002dd
 80002d0:	08000329 	.word	0x08000329
 80002d4:	08000345 	.word	0x08000345
 80002d8:	08000391 	.word	0x08000391
        case rightClick:
            // returns false if whole cycle done
            if(blinkPeriod(right) && cycleCount != cycles) {
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f875 	bl	80003cc <blinkPeriod>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d006      	beq.n	80002f6 <controller+0x9e>
 80002e8:	4b37      	ldr	r3, [pc, #220]	; (80003c8 <controller+0x170>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d002      	beq.n	80002f6 <controller+0x9e>
                currentButton = rightClick;
 80002f0:	4b33      	ldr	r3, [pc, #204]	; (80003c0 <controller+0x168>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	701a      	strb	r2, [r3, #0]
            }
            // Count up to 3 so 3 cycles are done
            if(!getActivePeriod()) cycleCount++;
 80002f6:	f000 f935 	bl	8000564 <getActivePeriod>
 80002fa:	4603      	mov	r3, r0
 80002fc:	f083 0301 	eor.w	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d005      	beq.n	8000312 <controller+0xba>
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <controller+0x170>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <controller+0x170>)
 8000310:	701a      	strb	r2, [r3, #0]
            // If 3 cycles done, current button = 0 and cycleCount reset.
            if(cycleCount == cycles) {
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <controller+0x170>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b03      	cmp	r3, #3
 8000318:	d14a      	bne.n	80003b0 <controller+0x158>
                cycleCount = cycleInit;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <controller+0x170>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
                currentButton = noButton;
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <controller+0x168>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000326:	e043      	b.n	80003b0 <controller+0x158>
        case rightHold:
            // returns false if whole cycle done
            if(blinkPeriod(right)) currentButton = rightHold;
 8000328:	2001      	movs	r0, #1
 800032a:	f000 f84f 	bl	80003cc <blinkPeriod>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <controller+0xe4>
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <controller+0x168>)
 8000336:	2202      	movs	r2, #2
 8000338:	701a      	strb	r2, [r3, #0]
            else currentButton = noButton;
            break;
 800033a:	e03c      	b.n	80003b6 <controller+0x15e>
            else currentButton = noButton;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <controller+0x168>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
            break;
 8000342:	e038      	b.n	80003b6 <controller+0x15e>
        case leftClick:
            // returns false if whole cycle done
            if(blinkPeriod(left) && cycleCount != cycles) {
 8000344:	2000      	movs	r0, #0
 8000346:	f000 f841 	bl	80003cc <blinkPeriod>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d006      	beq.n	800035e <controller+0x106>
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <controller+0x170>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d002      	beq.n	800035e <controller+0x106>
                currentButton = leftClick;
 8000358:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <controller+0x168>)
 800035a:	2203      	movs	r2, #3
 800035c:	701a      	strb	r2, [r3, #0]
            }
            // Count up to 3 so 3 cycles are done
            if(!getActivePeriod()) cycleCount++;
 800035e:	f000 f901 	bl	8000564 <getActivePeriod>
 8000362:	4603      	mov	r3, r0
 8000364:	f083 0301 	eor.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d005      	beq.n	800037a <controller+0x122>
 800036e:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <controller+0x170>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <controller+0x170>)
 8000378:	701a      	strb	r2, [r3, #0]
            // If 3 cycles done, current button = 0 and cycleCount reset.
            if(cycleCount == cycles) {
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <controller+0x170>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b03      	cmp	r3, #3
 8000380:	d118      	bne.n	80003b4 <controller+0x15c>
                cycleCount = cycleInit;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <controller+0x170>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
                currentButton = noButton;
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <controller+0x168>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800038e:	e011      	b.n	80003b4 <controller+0x15c>
        case leftHold:
            // returns false if whole cycle done
            if(blinkPeriod(left)) currentButton = leftHold;
 8000390:	2000      	movs	r0, #0
 8000392:	f000 f81b 	bl	80003cc <blinkPeriod>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <controller+0x14c>
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <controller+0x168>)
 800039e:	2204      	movs	r2, #4
 80003a0:	701a      	strb	r2, [r3, #0]
            else currentButton = noButton;
            break;
 80003a2:	e008      	b.n	80003b6 <controller+0x15e>
            else currentButton = noButton;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <controller+0x168>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
            break;
 80003aa:	e004      	b.n	80003b6 <controller+0x15e>
        default:
            break;
 80003ac:	bf00      	nop
 80003ae:	e002      	b.n	80003b6 <controller+0x15e>
            break;
 80003b0:	bf00      	nop
 80003b2:	e000      	b.n	80003b6 <controller+0x15e>
            break;
 80003b4:	bf00      	nop
    }
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200000b4 	.word	0x200000b4
 80003c4:	200000b5 	.word	0x200000b5
 80003c8:	200000b6 	.word	0x200000b6

080003cc <blinkPeriod>:
};

uint8_t currentStep = step0;
bool activePeriod = false;

bool blinkPeriod(bool direction){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
    static uint32_t lastTime = 0; // Store the last time you checked
    static uint8_t step = step1;
    uint32_t currentTime = HAL_GetTick(); // Get current time
 80003d6:	f000 fb65 	bl	8000aa4 <HAL_GetTick>
 80003da:	60b8      	str	r0, [r7, #8]

    // Time not elapsed
    if ((currentTime - lastTime) < delay) return (true);
 80003dc:	4b5b      	ldr	r3, [pc, #364]	; (800054c <blinkPeriod+0x180>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003e8:	d201      	bcs.n	80003ee <blinkPeriod+0x22>
 80003ea:	2301      	movs	r3, #1
 80003ec:	e0a9      	b.n	8000542 <blinkPeriod+0x176>

    // Update last time after 1 second has elapsed
    lastTime = currentTime;
 80003ee:	4a57      	ldr	r2, [pc, #348]	; (800054c <blinkPeriod+0x180>)
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	6013      	str	r3, [r2, #0]

    switch(step){
 80003f4:	4b56      	ldr	r3, [pc, #344]	; (8000550 <blinkPeriod+0x184>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	2b05      	cmp	r3, #5
 80003fc:	f200 8098 	bhi.w	8000530 <blinkPeriod+0x164>
 8000400:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <blinkPeriod+0x3c>)
 8000402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000406:	bf00      	nop
 8000408:	08000421 	.word	0x08000421
 800040c:	0800044b 	.word	0x0800044b
 8000410:	08000477 	.word	0x08000477
 8000414:	080004a3 	.word	0x080004a3
 8000418:	080004cf 	.word	0x080004cf
 800041c:	080004f9 	.word	0x080004f9
        case step1:
            direction ? switchLed(leds[0], true) : switchLed(leds[4], true);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d006      	beq.n	8000434 <blinkPeriod+0x68>
 8000426:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <blinkPeriod+0x188>)
 8000428:	2201      	movs	r2, #1
 800042a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800042e:	f000 f8a3 	bl	8000578 <switchLed>
 8000432:	e006      	b.n	8000442 <blinkPeriod+0x76>
 8000434:	4b47      	ldr	r3, [pc, #284]	; (8000554 <blinkPeriod+0x188>)
 8000436:	2201      	movs	r2, #1
 8000438:	3320      	adds	r3, #32
 800043a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800043e:	f000 f89b 	bl	8000578 <switchLed>
            step = step2;
 8000442:	4b43      	ldr	r3, [pc, #268]	; (8000550 <blinkPeriod+0x184>)
 8000444:	2202      	movs	r2, #2
 8000446:	701a      	strb	r2, [r3, #0]
            break;
 8000448:	e073      	b.n	8000532 <blinkPeriod+0x166>
        case step2:
            direction ? switchLed(leds[1], true) : switchLed(leds[3], true);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d007      	beq.n	8000460 <blinkPeriod+0x94>
 8000450:	4b40      	ldr	r3, [pc, #256]	; (8000554 <blinkPeriod+0x188>)
 8000452:	2201      	movs	r2, #1
 8000454:	3308      	adds	r3, #8
 8000456:	e893 0003 	ldmia.w	r3, {r0, r1}
 800045a:	f000 f88d 	bl	8000578 <switchLed>
 800045e:	e006      	b.n	800046e <blinkPeriod+0xa2>
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <blinkPeriod+0x188>)
 8000462:	2201      	movs	r2, #1
 8000464:	3318      	adds	r3, #24
 8000466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800046a:	f000 f885 	bl	8000578 <switchLed>
            step = step3;
 800046e:	4b38      	ldr	r3, [pc, #224]	; (8000550 <blinkPeriod+0x184>)
 8000470:	2203      	movs	r2, #3
 8000472:	701a      	strb	r2, [r3, #0]
            break;
 8000474:	e05d      	b.n	8000532 <blinkPeriod+0x166>
        case step3:
            direction ? switchLed(leds[2], true) : switchLed(leds[2], true);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d007      	beq.n	800048c <blinkPeriod+0xc0>
 800047c:	4b35      	ldr	r3, [pc, #212]	; (8000554 <blinkPeriod+0x188>)
 800047e:	2201      	movs	r2, #1
 8000480:	3310      	adds	r3, #16
 8000482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000486:	f000 f877 	bl	8000578 <switchLed>
 800048a:	e006      	b.n	800049a <blinkPeriod+0xce>
 800048c:	4b31      	ldr	r3, [pc, #196]	; (8000554 <blinkPeriod+0x188>)
 800048e:	2201      	movs	r2, #1
 8000490:	3310      	adds	r3, #16
 8000492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000496:	f000 f86f 	bl	8000578 <switchLed>
            step = step4;
 800049a:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <blinkPeriod+0x184>)
 800049c:	2204      	movs	r2, #4
 800049e:	701a      	strb	r2, [r3, #0]
            break;
 80004a0:	e047      	b.n	8000532 <blinkPeriod+0x166>
        case step4:
            direction ? switchLed(leds[3], true) : switchLed(leds[1], true);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d007      	beq.n	80004b8 <blinkPeriod+0xec>
 80004a8:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <blinkPeriod+0x188>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	3318      	adds	r3, #24
 80004ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004b2:	f000 f861 	bl	8000578 <switchLed>
 80004b6:	e006      	b.n	80004c6 <blinkPeriod+0xfa>
 80004b8:	4b26      	ldr	r3, [pc, #152]	; (8000554 <blinkPeriod+0x188>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	3308      	adds	r3, #8
 80004be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004c2:	f000 f859 	bl	8000578 <switchLed>
            step = step5;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <blinkPeriod+0x184>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	701a      	strb	r2, [r3, #0]
            break;
 80004cc:	e031      	b.n	8000532 <blinkPeriod+0x166>
        case step5:
            direction ? switchLed(leds[4], true) : switchLed(leds[0], true);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d007      	beq.n	80004e4 <blinkPeriod+0x118>
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <blinkPeriod+0x188>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	3320      	adds	r3, #32
 80004da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004de:	f000 f84b 	bl	8000578 <switchLed>
 80004e2:	e005      	b.n	80004f0 <blinkPeriod+0x124>
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <blinkPeriod+0x188>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004ec:	f000 f844 	bl	8000578 <switchLed>
            step = step6;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <blinkPeriod+0x184>)
 80004f2:	2206      	movs	r2, #6
 80004f4:	701a      	strb	r2, [r3, #0]
            break;
 80004f6:	e01c      	b.n	8000532 <blinkPeriod+0x166>
        case step6:
        	for(uint8_t i = 0; i < ledCount; i++) switchLed(leds[i], false);
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e00b      	b.n	8000516 <blinkPeriod+0x14a>
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	4914      	ldr	r1, [pc, #80]	; (8000554 <blinkPeriod+0x188>)
 8000502:	2200      	movs	r2, #0
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	440b      	add	r3, r1
 8000508:	e893 0003 	ldmia.w	r3, {r0, r1}
 800050c:	f000 f834 	bl	8000578 <switchLed>
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <blinkPeriod+0x18c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	7bfa      	ldrb	r2, [r7, #15]
 800051c:	429a      	cmp	r2, r3
 800051e:	d3ee      	bcc.n	80004fe <blinkPeriod+0x132>
			step = step1;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <blinkPeriod+0x184>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
			activePeriod = false;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <blinkPeriod+0x190>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
			return (false);
 800052c:	2300      	movs	r3, #0
 800052e:	e008      	b.n	8000542 <blinkPeriod+0x176>
        default:
            break;
 8000530:	bf00      	nop
    }
    currentStep = step;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <blinkPeriod+0x184>)
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <blinkPeriod+0x194>)
 8000538:	701a      	strb	r2, [r3, #0]
    activePeriod = true;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <blinkPeriod+0x190>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
    return (true);
 8000540:	2301      	movs	r3, #1
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000bc 	.word	0x200000bc
 8000550:	20000039 	.word	0x20000039
 8000554:	20000010 	.word	0x20000010
 8000558:	20000038 	.word	0x20000038
 800055c:	200000b8 	.word	0x200000b8
 8000560:	200000b7 	.word	0x200000b7

08000564 <getActivePeriod>:

bool getActivePeriod(){
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
    return (activePeriod);
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <getActivePeriod+0x10>)
 800056a:	781b      	ldrb	r3, [r3, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	200000b8 	.word	0x200000b8

08000578 <switchLed>:

uint8_t getStep(){
    return (currentStep);
}

void switchLed(gpioLeds led, bool state){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	e883 0003 	stmia.w	r3, {r0, r1}
 8000586:	4613      	mov	r3, r2
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led.port, led.pin, state);
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	89b9      	ldrh	r1, [r7, #12]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fd10 	bl	8000fb6 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0b4      	sub	sp, #208	; 0xd0
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fa25 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f833 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f897 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f86b 	bl	800068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char dpdmachtspass[200] = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	22c4      	movs	r2, #196	; 0xc4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb10 	bl	8001be8 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t direction = buttonReader();
 80005c8:	f7ff fdc8 	bl	800015c <buttonReader>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	  if(direction!=0){
 80005d2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d012      	beq.n	8000600 <main+0x60>
		  sprintf(dpdmachtspass, "Button ist: %d\n", direction);
 80005da:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <main+0x6c>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fae0 	bl	8001ba8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) dpdmachtspass, strlen(dpdmachtspass), HAL_MAX_DELAY);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdae 	bl	800014c <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x70>)
 80005fc:	f001 f954 	bl	80018a8 <HAL_UART_Transmit>
	  }
	  controller(direction);
 8000600:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fe27 	bl	8000258 <controller>
  {
 800060a:	e7dd      	b.n	80005c8 <main+0x28>
 800060c:	08002524 	.word	0x08002524
 8000610:	200000c0 	.word	0x200000c0

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fae0 	bl	8001be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2310      	movs	r3, #16
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000642:	2300      	movs	r3, #0
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fccc 	bl	8000fe8 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000656:	f000 f8d1 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff3a 	bl	80014ec <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067e:	f000 f8bd 	bl	80007fc <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3740      	adds	r7, #64	; 0x40
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 f8a0 	bl	8001808 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f895 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000c0 	.word	0x200000c0
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <MX_GPIO_Init+0x10c>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a3c      	ldr	r2, [pc, #240]	; (80007ec <MX_GPIO_Init+0x10c>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0310 	and.w	r3, r3, #16
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <MX_GPIO_Init+0x10c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a36      	ldr	r2, [pc, #216]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <MX_GPIO_Init+0x10c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a30      	ldr	r2, [pc, #192]	; (80007ec <MX_GPIO_Init+0x10c>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2103      	movs	r1, #3
 8000740:	482b      	ldr	r0, [pc, #172]	; (80007f0 <MX_GPIO_Init+0x110>)
 8000742:	f000 fc38 	bl	8000fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	482a      	ldr	r0, [pc, #168]	; (80007f4 <MX_GPIO_Init+0x114>)
 800074c:	f000 fc33 	bl	8000fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000756:	4828      	ldr	r0, [pc, #160]	; (80007f8 <MX_GPIO_Init+0x118>)
 8000758:	f000 fc2d 	bl	8000fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : rightBlink_Pin */
  GPIO_InitStruct.Pin = rightBlink_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(rightBlink_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <MX_GPIO_Init+0x110>)
 8000772:	f000 fa85 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000776:	2303      	movs	r3, #3
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4818      	ldr	r0, [pc, #96]	; (80007f0 <MX_GPIO_Init+0x110>)
 800078e:	f000 fa77 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_Pin */
  GPIO_InitStruct.Pin = LED5_Pin;
 8000792:	2320      	movs	r3, #32
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0x114>)
 80007aa:	f000 fa69 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80007ae:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_GPIO_Init+0x118>)
 80007c8:	f000 fa5a 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftBlink_Pin */
  GPIO_InitStruct.Pin = leftBlink_Pin;
 80007cc:	2320      	movs	r3, #32
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(leftBlink_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x118>)
 80007e0:	f000 fa4e 	bl	8000c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40011000 	.word	0x40011000
 80007f4:	40010800 	.word	0x40010800
 80007f8:	40010c00 	.word	0x40010c00

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_MspInit+0x40>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <HAL_MspInit+0x40>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x40>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x40>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_MspInit+0x40>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_MspInit+0x40>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d12f      	bne.n	80008cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089c:	2304      	movs	r3, #4
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <HAL_UART_MspInit+0x90>)
 80008b0:	f000 f9e6 	bl	8000c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b4:	2308      	movs	r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x90>)
 80008c8:	f000 f9da 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f8ab 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f001 f94a 	bl	8001bf8 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20005000 	.word	0x20005000
 8000990:	00000400 	.word	0x00000400
 8000994:	20000108 	.word	0x20000108
 8000998:	20000258 	.word	0x20000258

0800099c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff fff8 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c4:	4c09      	ldr	r4, [pc, #36]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f001 f917 	bl	8001c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fde3 	bl	80005a0 <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80009e4:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80009e8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80009ec:	20000258 	.word	0x20000258

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f907 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fefa 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f911 	bl	8000c66 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f000 f8e7 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000003c 	.word	0x2000003c
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	20000040 	.word	0x20000040

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000044 	.word	0x20000044
 8000aa0:	2000010c 	.word	0x2000010c

08000aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	2000010c 	.word	0x2000010c

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	f7ff ff90 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff49 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5e 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff90 	bl	8000b70 <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5f 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b08b      	sub	sp, #44	; 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	e169      	b.n	8000f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c94:	2201      	movs	r2, #1
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 8158 	bne.w	8000f62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a9a      	ldr	r2, [pc, #616]	; (8000f20 <HAL_GPIO_Init+0x2a0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d05e      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cbc:	4a98      	ldr	r2, [pc, #608]	; (8000f20 <HAL_GPIO_Init+0x2a0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d875      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cc2:	4a98      	ldr	r2, [pc, #608]	; (8000f24 <HAL_GPIO_Init+0x2a4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d058      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cc8:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <HAL_GPIO_Init+0x2a4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d86f      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cce:	4a96      	ldr	r2, [pc, #600]	; (8000f28 <HAL_GPIO_Init+0x2a8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d052      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cd4:	4a94      	ldr	r2, [pc, #592]	; (8000f28 <HAL_GPIO_Init+0x2a8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d869      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cda:	4a94      	ldr	r2, [pc, #592]	; (8000f2c <HAL_GPIO_Init+0x2ac>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d04c      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000ce0:	4a92      	ldr	r2, [pc, #584]	; (8000f2c <HAL_GPIO_Init+0x2ac>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d863      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000ce6:	4a92      	ldr	r2, [pc, #584]	; (8000f30 <HAL_GPIO_Init+0x2b0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d046      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
 8000cec:	4a90      	ldr	r2, [pc, #576]	; (8000f30 <HAL_GPIO_Init+0x2b0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d85d      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d82a      	bhi.n	8000d4c <HAL_GPIO_Init+0xcc>
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d859      	bhi.n	8000dae <HAL_GPIO_Init+0x12e>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <HAL_GPIO_Init+0x80>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d7b 	.word	0x08000d7b
 8000d04:	08000d55 	.word	0x08000d55
 8000d08:	08000d67 	.word	0x08000d67
 8000d0c:	08000da9 	.word	0x08000da9
 8000d10:	08000daf 	.word	0x08000daf
 8000d14:	08000daf 	.word	0x08000daf
 8000d18:	08000daf 	.word	0x08000daf
 8000d1c:	08000daf 	.word	0x08000daf
 8000d20:	08000daf 	.word	0x08000daf
 8000d24:	08000daf 	.word	0x08000daf
 8000d28:	08000daf 	.word	0x08000daf
 8000d2c:	08000daf 	.word	0x08000daf
 8000d30:	08000daf 	.word	0x08000daf
 8000d34:	08000daf 	.word	0x08000daf
 8000d38:	08000daf 	.word	0x08000daf
 8000d3c:	08000daf 	.word	0x08000daf
 8000d40:	08000daf 	.word	0x08000daf
 8000d44:	08000d5d 	.word	0x08000d5d
 8000d48:	08000d71 	.word	0x08000d71
 8000d4c:	4a79      	ldr	r2, [pc, #484]	; (8000f34 <HAL_GPIO_Init+0x2b4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e02c      	b.n	8000dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e029      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e024      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e01f      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	330c      	adds	r3, #12
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e01a      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d82:	2304      	movs	r3, #4
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e013      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d105      	bne.n	8000d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	611a      	str	r2, [r3, #16]
          break;
 8000d9a:	e009      	b.n	8000db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	615a      	str	r2, [r3, #20]
          break;
 8000da6:	e003      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x130>
          break;
 8000dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d801      	bhi.n	8000dba <HAL_GPIO_Init+0x13a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e001      	b.n	8000dbe <HAL_GPIO_Init+0x13e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
 8000dc4:	d802      	bhi.n	8000dcc <HAL_GPIO_Init+0x14c>
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x152>
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	3b08      	subs	r3, #8
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	210f      	movs	r1, #15
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	6a39      	ldr	r1, [r7, #32]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	431a      	orrs	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80b1 	beq.w	8000f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e00:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <HAL_GPIO_Init+0x2b8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a4c      	ldr	r2, [pc, #304]	; (8000f38 <HAL_GPIO_Init+0x2b8>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e18:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_GPIO_Init+0x2bc>)
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a40      	ldr	r2, [pc, #256]	; (8000f40 <HAL_GPIO_Init+0x2c0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1ec>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a3f      	ldr	r2, [pc, #252]	; (8000f44 <HAL_GPIO_Init+0x2c4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1e8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3e      	ldr	r2, [pc, #248]	; (8000f48 <HAL_GPIO_Init+0x2c8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1e4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1e0>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x1ee>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x1ee>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x1ee>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x1ee>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7e:	492f      	ldr	r1, [pc, #188]	; (8000f3c <HAL_GPIO_Init+0x2bc>)
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	492c      	ldr	r1, [pc, #176]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4928      	ldr	r1, [pc, #160]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	4922      	ldr	r1, [pc, #136]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60cb      	str	r3, [r1, #12]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	491e      	ldr	r1, [pc, #120]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4918      	ldr	r1, [pc, #96]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4914      	ldr	r1, [pc, #80]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d021      	beq.n	8000f54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	490e      	ldr	r1, [pc, #56]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
 8000f1c:	e021      	b.n	8000f62 <HAL_GPIO_Init+0x2e2>
 8000f1e:	bf00      	nop
 8000f20:	10320000 	.word	0x10320000
 8000f24:	10310000 	.word	0x10310000
 8000f28:	10220000 	.word	0x10220000
 8000f2c:	10210000 	.word	0x10210000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10110000 	.word	0x10110000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40011400 	.word	0x40011400
 8000f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_GPIO_Init+0x304>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4909      	ldr	r1, [pc, #36]	; (8000f84 <HAL_GPIO_Init+0x304>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f ae8e 	bne.w	8000c94 <HAL_GPIO_Init+0x14>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	372c      	adds	r7, #44	; 0x2c
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc6:	787b      	ldrb	r3, [r7, #1]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	611a      	str	r2, [r3, #16]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e272      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8087 	beq.w	8001116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00c      	beq.n	800102e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	4b8f      	ldr	r3, [pc, #572]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d112      	bne.n	8001046 <HAL_RCC_OscConfig+0x5e>
 8001020:	4b8c      	ldr	r3, [pc, #560]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d10b      	bne.n	8001046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	4b89      	ldr	r3, [pc, #548]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d06c      	beq.n	8001114 <HAL_RCC_OscConfig+0x12c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d168      	bne.n	8001114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e24c      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x76>
 8001050:	4b80      	ldr	r3, [pc, #512]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a7f      	ldr	r2, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e02e      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x98>
 8001066:	4b7b      	ldr	r3, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a7a      	ldr	r2, [pc, #488]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b78      	ldr	r3, [pc, #480]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a77      	ldr	r2, [pc, #476]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e01d      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0xbc>
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a71      	ldr	r2, [pc, #452]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a6a      	ldr	r2, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a67      	ldr	r2, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcee 	bl	8000aa4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fcea 	bl	8000aa4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e200      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0xe4>
 80010ea:	e014      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcda 	bl	8000aa4 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcd6 	bl	8000aa4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1ec      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x10c>
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d063      	beq.n	80011ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b08      	cmp	r3, #8
 8001138:	d11c      	bne.n	8001174 <HAL_RCC_OscConfig+0x18c>
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x176>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e1c0      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4939      	ldr	r1, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	e03a      	b.n	80011ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_RCC_OscConfig+0x270>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fc8f 	bl	8000aa4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fc8b 	bl	8000aa4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e1a1      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4927      	ldr	r1, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e015      	b.n	80011ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_RCC_OscConfig+0x270>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc6e 	bl	8000aa4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc6a 	bl	8000aa4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e180      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d03a      	beq.n	800126c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d019      	beq.n	8001232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_RCC_OscConfig+0x274>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fc4e 	bl	8000aa4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120c:	f7ff fc4a 	bl	8000aa4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e160      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 face 	bl	80017cc <RCC_Delay>
 8001230:	e01c      	b.n	800126c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_RCC_OscConfig+0x274>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fc34 	bl	8000aa4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123e:	e00f      	b.n	8001260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fc30 	bl	8000aa4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d908      	bls.n	8001260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e146      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	42420000 	.word	0x42420000
 800125c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	4b92      	ldr	r3, [pc, #584]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e9      	bne.n	8001240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a6 	beq.w	80013c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b88      	ldr	r3, [pc, #544]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a87      	ldr	r2, [pc, #540]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b85      	ldr	r3, [pc, #532]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a2:	2301      	movs	r3, #1
 80012a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <HAL_RCC_OscConfig+0x4c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d118      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b2:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_RCC_OscConfig+0x4c8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7e      	ldr	r2, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x4c8>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012be:	f7ff fbf1 	bl	8000aa4 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7ff fbed 	bl	8000aa4 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e103      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <HAL_RCC_OscConfig+0x4c8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x312>
 80012ec:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	e02d      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x334>
 8001302:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a69      	ldr	r2, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a66      	ldr	r2, [pc, #408]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	e01c      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x356>
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 800133e:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a5a      	ldr	r2, [pc, #360]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6213      	str	r3, [r2, #32]
 800134a:	4b58      	ldr	r3, [pc, #352]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a57      	ldr	r2, [pc, #348]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fba1 	bl	8000aa4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fb9d 	bl	8000aa4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0b1      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ee      	beq.n	8001366 <HAL_RCC_OscConfig+0x37e>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb8b 	bl	8000aa4 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb87 	bl	8000aa4 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e09b      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d105      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8087 	beq.w	80014de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d061      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d146      	bne.n	8001472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x4cc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb5b 	bl	8000aa4 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb57 	bl	8000aa4 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e06d      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d108      	bne.n	800142c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4921      	ldr	r1, [pc, #132]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a19      	ldr	r1, [r3, #32]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	430b      	orrs	r3, r1
 800143e:	491b      	ldr	r1, [pc, #108]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x4cc>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fb2b 	bl	8000aa4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fb27 	bl	8000aa4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e03d      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x46a>
 8001470:	e035      	b.n	80014de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_RCC_OscConfig+0x4cc>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb14 	bl	8000aa4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb10 	bl	8000aa4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e026      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_RCC_OscConfig+0x4c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x498>
 800149e:	e01e      	b.n	80014de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d107      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e019      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40007000 	.word	0x40007000
 80014b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x500>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0d0      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d910      	bls.n	8001530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4965      	ldr	r1, [pc, #404]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800156a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	494d      	ldr	r1, [pc, #308]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d040      	beq.n	800160c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e073      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06b      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f023 0203 	bic.w	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4936      	ldr	r1, [pc, #216]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015dc:	f7ff fa62 	bl	8000aa4 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7ff fa5e 	bl	8000aa4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e053      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 020c 	and.w	r2, r3, #12
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	d1eb      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d210      	bcs.n	800163c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0207 	bic.w	r2, r3, #7
 8001622:	4922      	ldr	r1, [pc, #136]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e032      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167a:	f000 f821 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	490a      	ldr	r1, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	5ccb      	ldrb	r3, [r1, r3]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1d0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f9c0 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08002534 	.word	0x08002534
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	20000040 	.word	0x20000040

080016c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_RCC_GetSysClockFreq+0x94>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x30>
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0x36>
 80016ee:	e027      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_GetSysClockFreq+0x98>)
 80016f2:	613b      	str	r3, [r7, #16]
      break;
 80016f4:	e027      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d010      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_RCC_GetSysClockFreq+0x94>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	0c5b      	lsrs	r3, r3, #17
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	4a11      	ldr	r2, [pc, #68]	; (8001760 <HAL_RCC_GetSysClockFreq+0xa0>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_RCC_GetSysClockFreq+0x98>)
 8001722:	fb03 f202 	mul.w	r2, r3, r2
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e004      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	613b      	str	r3, [r7, #16]
      break;
 800173e:	e002      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_GetSysClockFreq+0x98>)
 8001742:	613b      	str	r3, [r7, #16]
      break;
 8001744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001746:	693b      	ldr	r3, [r7, #16]
}
 8001748:	4618      	mov	r0, r3
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	007a1200 	.word	0x007a1200
 800175c:	0800254c 	.word	0x0800254c
 8001760:	0800255c 	.word	0x0800255c
 8001764:	003d0900 	.word	0x003d0900

08001768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_RCC_GetHCLKFreq+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	2000003c 	.word	0x2000003c

0800177c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001780:	f7ff fff2 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 8001784:	4602      	mov	r2, r0
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	4903      	ldr	r1, [pc, #12]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	08002544 	.word	0x08002544

080017a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a8:	f7ff ffde 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0adb      	lsrs	r3, r3, #11
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4903      	ldr	r1, [pc, #12]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08002544 	.word	0x08002544

080017cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <RCC_Delay+0x34>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <RCC_Delay+0x38>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0a5b      	lsrs	r3, r3, #9
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e8:	bf00      	nop
  }
  while (Delay --);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	60fa      	str	r2, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f9      	bne.n	80017e8 <RCC_Delay+0x1c>
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	2000003c 	.word	0x2000003c
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e042      	b.n	80018a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff f80c 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800184a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f91d 	bl	8001a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d16d      	bne.n	80019a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_UART_Transmit+0x2c>
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e066      	b.n	80019a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2221      	movs	r2, #33	; 0x21
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018e6:	f7ff f8dd 	bl	8000aa4 <HAL_GetTick>
 80018ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001900:	d108      	bne.n	8001914 <HAL_UART_Transmit+0x6c>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	e003      	b.n	800191c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800191c:	e02a      	b.n	8001974 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f840 	bl	80019ae <UART_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e036      	b.n	80019a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10b      	bne.n	8001956 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800194c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3302      	adds	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e007      	b.n	8001966 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	3301      	adds	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001978:	b29b      	uxth	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1cf      	bne.n	800191e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2200      	movs	r2, #0
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f810 	bl	80019ae <UART_WaitOnFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e006      	b.n	80019a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80019a4:	2302      	movs	r3, #2
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b090      	sub	sp, #64	; 0x40
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019be:	e050      	b.n	8001a62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c6:	d04c      	beq.n	8001a62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <UART_WaitOnFlagUntilTimeout+0x30>
 80019ce:	f7ff f869 	bl	8000aa4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019da:	429a      	cmp	r2, r3
 80019dc:	d241      	bcs.n	8001a62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	330c      	adds	r3, #12
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	e853 3f00 	ldrex	r3, [r3]
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	330c      	adds	r3, #12
 80019fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019fe:	637a      	str	r2, [r7, #52]	; 0x34
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a06:	e841 2300 	strex	r3, r2, [r1]
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e5      	bne.n	80019de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3314      	adds	r3, #20
 8001a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	e853 3f00 	ldrex	r3, [r3]
 8001a20:	613b      	str	r3, [r7, #16]
   return(result);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3314      	adds	r3, #20
 8001a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a32:	623a      	str	r2, [r7, #32]
 8001a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a36:	69f9      	ldr	r1, [r7, #28]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	e841 2300 	strex	r3, r2, [r1]
 8001a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e5      	bne.n	8001a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e00f      	b.n	8001a82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d09f      	beq.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3740      	adds	r7, #64	; 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ac6:	f023 030c 	bic.w	r3, r3, #12
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <UART_SetConfig+0x114>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d103      	bne.n	8001afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001af4:	f7ff fe56 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	e002      	b.n	8001b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001afc:	f7ff fe3e 	bl	800177c <HAL_RCC_GetPCLK1Freq>
 8001b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009a      	lsls	r2, r3, #2
 8001b0c:	441a      	add	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <UART_SetConfig+0x118>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	0119      	lsls	r1, r3, #4
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009a      	lsls	r2, r3, #2
 8001b2c:	441a      	add	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <UART_SetConfig+0x118>)
 8001b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2064      	movs	r0, #100	; 0x64
 8001b42:	fb00 f303 	mul.w	r3, r0, r3
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	3332      	adds	r3, #50	; 0x32
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <UART_SetConfig+0x118>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b58:	4419      	add	r1, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009a      	lsls	r2, r3, #2
 8001b64:	441a      	add	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <UART_SetConfig+0x118>)
 8001b72:	fba3 0302 	umull	r0, r3, r3, r2
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2064      	movs	r0, #100	; 0x64
 8001b7a:	fb00 f303 	mul.w	r3, r0, r3
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	3332      	adds	r3, #50	; 0x32
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <UART_SetConfig+0x118>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	f003 020f 	and.w	r2, r3, #15
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	440a      	add	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	51eb851f 	.word	0x51eb851f

08001ba8 <siprintf>:
 8001ba8:	b40e      	push	{r1, r2, r3}
 8001baa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bae:	b500      	push	{lr}
 8001bb0:	b09c      	sub	sp, #112	; 0x70
 8001bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8001bb4:	9002      	str	r0, [sp, #8]
 8001bb6:	9006      	str	r0, [sp, #24]
 8001bb8:	9107      	str	r1, [sp, #28]
 8001bba:	9104      	str	r1, [sp, #16]
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <siprintf+0x38>)
 8001bbe:	4909      	ldr	r1, [pc, #36]	; (8001be4 <siprintf+0x3c>)
 8001bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bc4:	9105      	str	r1, [sp, #20]
 8001bc6:	6800      	ldr	r0, [r0, #0]
 8001bc8:	a902      	add	r1, sp, #8
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	f000 f89a 	bl	8001d04 <_svfiprintf_r>
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	9b02      	ldr	r3, [sp, #8]
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	b01c      	add	sp, #112	; 0x70
 8001bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bdc:	b003      	add	sp, #12
 8001bde:	4770      	bx	lr
 8001be0:	20000094 	.word	0x20000094
 8001be4:	ffff0208 	.word	0xffff0208

08001be8 <memset>:
 8001be8:	4603      	mov	r3, r0
 8001bea:	4402      	add	r2, r0
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d100      	bne.n	8001bf2 <memset+0xa>
 8001bf0:	4770      	bx	lr
 8001bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bf6:	e7f9      	b.n	8001bec <memset+0x4>

08001bf8 <__errno>:
 8001bf8:	4b01      	ldr	r3, [pc, #4]	; (8001c00 <__errno+0x8>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000094 	.word	0x20000094

08001c04 <__libc_init_array>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	2600      	movs	r6, #0
 8001c08:	4d0c      	ldr	r5, [pc, #48]	; (8001c3c <__libc_init_array+0x38>)
 8001c0a:	4c0d      	ldr	r4, [pc, #52]	; (8001c40 <__libc_init_array+0x3c>)
 8001c0c:	1b64      	subs	r4, r4, r5
 8001c0e:	10a4      	asrs	r4, r4, #2
 8001c10:	42a6      	cmp	r6, r4
 8001c12:	d109      	bne.n	8001c28 <__libc_init_array+0x24>
 8001c14:	f000 fc7a 	bl	800250c <_init>
 8001c18:	2600      	movs	r6, #0
 8001c1a:	4d0a      	ldr	r5, [pc, #40]	; (8001c44 <__libc_init_array+0x40>)
 8001c1c:	4c0a      	ldr	r4, [pc, #40]	; (8001c48 <__libc_init_array+0x44>)
 8001c1e:	1b64      	subs	r4, r4, r5
 8001c20:	10a4      	asrs	r4, r4, #2
 8001c22:	42a6      	cmp	r6, r4
 8001c24:	d105      	bne.n	8001c32 <__libc_init_array+0x2e>
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
 8001c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c2c:	4798      	blx	r3
 8001c2e:	3601      	adds	r6, #1
 8001c30:	e7ee      	b.n	8001c10 <__libc_init_array+0xc>
 8001c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c36:	4798      	blx	r3
 8001c38:	3601      	adds	r6, #1
 8001c3a:	e7f2      	b.n	8001c22 <__libc_init_array+0x1e>
 8001c3c:	08002594 	.word	0x08002594
 8001c40:	08002594 	.word	0x08002594
 8001c44:	08002594 	.word	0x08002594
 8001c48:	08002598 	.word	0x08002598

08001c4c <__retarget_lock_acquire_recursive>:
 8001c4c:	4770      	bx	lr

08001c4e <__retarget_lock_release_recursive>:
 8001c4e:	4770      	bx	lr

08001c50 <__ssputs_r>:
 8001c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c54:	461f      	mov	r7, r3
 8001c56:	688e      	ldr	r6, [r1, #8]
 8001c58:	4682      	mov	sl, r0
 8001c5a:	42be      	cmp	r6, r7
 8001c5c:	460c      	mov	r4, r1
 8001c5e:	4690      	mov	r8, r2
 8001c60:	680b      	ldr	r3, [r1, #0]
 8001c62:	d82c      	bhi.n	8001cbe <__ssputs_r+0x6e>
 8001c64:	898a      	ldrh	r2, [r1, #12]
 8001c66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c6a:	d026      	beq.n	8001cba <__ssputs_r+0x6a>
 8001c6c:	6965      	ldr	r5, [r4, #20]
 8001c6e:	6909      	ldr	r1, [r1, #16]
 8001c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c74:	eba3 0901 	sub.w	r9, r3, r1
 8001c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c7c:	1c7b      	adds	r3, r7, #1
 8001c7e:	444b      	add	r3, r9
 8001c80:	106d      	asrs	r5, r5, #1
 8001c82:	429d      	cmp	r5, r3
 8001c84:	bf38      	it	cc
 8001c86:	461d      	movcc	r5, r3
 8001c88:	0553      	lsls	r3, r2, #21
 8001c8a:	d527      	bpl.n	8001cdc <__ssputs_r+0x8c>
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	f000 f957 	bl	8001f40 <_malloc_r>
 8001c92:	4606      	mov	r6, r0
 8001c94:	b360      	cbz	r0, 8001cf0 <__ssputs_r+0xa0>
 8001c96:	464a      	mov	r2, r9
 8001c98:	6921      	ldr	r1, [r4, #16]
 8001c9a:	f000 fbd9 	bl	8002450 <memcpy>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	81a3      	strh	r3, [r4, #12]
 8001caa:	6126      	str	r6, [r4, #16]
 8001cac:	444e      	add	r6, r9
 8001cae:	6026      	str	r6, [r4, #0]
 8001cb0:	463e      	mov	r6, r7
 8001cb2:	6165      	str	r5, [r4, #20]
 8001cb4:	eba5 0509 	sub.w	r5, r5, r9
 8001cb8:	60a5      	str	r5, [r4, #8]
 8001cba:	42be      	cmp	r6, r7
 8001cbc:	d900      	bls.n	8001cc0 <__ssputs_r+0x70>
 8001cbe:	463e      	mov	r6, r7
 8001cc0:	4632      	mov	r2, r6
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	f000 fb8a 	bl	80023de <memmove>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	68a3      	ldr	r3, [r4, #8]
 8001cce:	1b9b      	subs	r3, r3, r6
 8001cd0:	60a3      	str	r3, [r4, #8]
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4433      	add	r3, r6
 8001cd6:	6023      	str	r3, [r4, #0]
 8001cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cdc:	462a      	mov	r2, r5
 8001cde:	f000 fb4f 	bl	8002380 <_realloc_r>
 8001ce2:	4606      	mov	r6, r0
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d1e0      	bne.n	8001caa <__ssputs_r+0x5a>
 8001ce8:	4650      	mov	r0, sl
 8001cea:	6921      	ldr	r1, [r4, #16]
 8001cec:	f000 fbbe 	bl	800246c <_free_r>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	f8ca 3000 	str.w	r3, [sl]
 8001cf6:	89a3      	ldrh	r3, [r4, #12]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	81a3      	strh	r3, [r4, #12]
 8001d02:	e7e9      	b.n	8001cd8 <__ssputs_r+0x88>

08001d04 <_svfiprintf_r>:
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d08:	4698      	mov	r8, r3
 8001d0a:	898b      	ldrh	r3, [r1, #12]
 8001d0c:	4607      	mov	r7, r0
 8001d0e:	061b      	lsls	r3, r3, #24
 8001d10:	460d      	mov	r5, r1
 8001d12:	4614      	mov	r4, r2
 8001d14:	b09d      	sub	sp, #116	; 0x74
 8001d16:	d50e      	bpl.n	8001d36 <_svfiprintf_r+0x32>
 8001d18:	690b      	ldr	r3, [r1, #16]
 8001d1a:	b963      	cbnz	r3, 8001d36 <_svfiprintf_r+0x32>
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	f000 f90f 	bl	8001f40 <_malloc_r>
 8001d22:	6028      	str	r0, [r5, #0]
 8001d24:	6128      	str	r0, [r5, #16]
 8001d26:	b920      	cbnz	r0, 8001d32 <_svfiprintf_r+0x2e>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d30:	e0d0      	b.n	8001ed4 <_svfiprintf_r+0x1d0>
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	616b      	str	r3, [r5, #20]
 8001d36:	2300      	movs	r3, #0
 8001d38:	9309      	str	r3, [sp, #36]	; 0x24
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d40:	2330      	movs	r3, #48	; 0x30
 8001d42:	f04f 0901 	mov.w	r9, #1
 8001d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001eec <_svfiprintf_r+0x1e8>
 8001d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d52:	4623      	mov	r3, r4
 8001d54:	469a      	mov	sl, r3
 8001d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d5a:	b10a      	cbz	r2, 8001d60 <_svfiprintf_r+0x5c>
 8001d5c:	2a25      	cmp	r2, #37	; 0x25
 8001d5e:	d1f9      	bne.n	8001d54 <_svfiprintf_r+0x50>
 8001d60:	ebba 0b04 	subs.w	fp, sl, r4
 8001d64:	d00b      	beq.n	8001d7e <_svfiprintf_r+0x7a>
 8001d66:	465b      	mov	r3, fp
 8001d68:	4622      	mov	r2, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	f7ff ff6f 	bl	8001c50 <__ssputs_r>
 8001d72:	3001      	adds	r0, #1
 8001d74:	f000 80a9 	beq.w	8001eca <_svfiprintf_r+0x1c6>
 8001d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d7a:	445a      	add	r2, fp
 8001d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8001d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80a1 	beq.w	8001eca <_svfiprintf_r+0x1c6>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d92:	f10a 0a01 	add.w	sl, sl, #1
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	9307      	str	r3, [sp, #28]
 8001d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8001da0:	4654      	mov	r4, sl
 8001da2:	2205      	movs	r2, #5
 8001da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da8:	4850      	ldr	r0, [pc, #320]	; (8001eec <_svfiprintf_r+0x1e8>)
 8001daa:	f000 fb43 	bl	8002434 <memchr>
 8001dae:	9a04      	ldr	r2, [sp, #16]
 8001db0:	b9d8      	cbnz	r0, 8001dea <_svfiprintf_r+0xe6>
 8001db2:	06d0      	lsls	r0, r2, #27
 8001db4:	bf44      	itt	mi
 8001db6:	2320      	movmi	r3, #32
 8001db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dbc:	0711      	lsls	r1, r2, #28
 8001dbe:	bf44      	itt	mi
 8001dc0:	232b      	movmi	r3, #43	; 0x2b
 8001dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8001dca:	2b2a      	cmp	r3, #42	; 0x2a
 8001dcc:	d015      	beq.n	8001dfa <_svfiprintf_r+0xf6>
 8001dce:	4654      	mov	r4, sl
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f04f 0c0a 	mov.w	ip, #10
 8001dd6:	9a07      	ldr	r2, [sp, #28]
 8001dd8:	4621      	mov	r1, r4
 8001dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dde:	3b30      	subs	r3, #48	; 0x30
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d94d      	bls.n	8001e80 <_svfiprintf_r+0x17c>
 8001de4:	b1b0      	cbz	r0, 8001e14 <_svfiprintf_r+0x110>
 8001de6:	9207      	str	r2, [sp, #28]
 8001de8:	e014      	b.n	8001e14 <_svfiprintf_r+0x110>
 8001dea:	eba0 0308 	sub.w	r3, r0, r8
 8001dee:	fa09 f303 	lsl.w	r3, r9, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	46a2      	mov	sl, r4
 8001df6:	9304      	str	r3, [sp, #16]
 8001df8:	e7d2      	b.n	8001da0 <_svfiprintf_r+0x9c>
 8001dfa:	9b03      	ldr	r3, [sp, #12]
 8001dfc:	1d19      	adds	r1, r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	9103      	str	r1, [sp, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bfbb      	ittet	lt
 8001e06:	425b      	neglt	r3, r3
 8001e08:	f042 0202 	orrlt.w	r2, r2, #2
 8001e0c:	9307      	strge	r3, [sp, #28]
 8001e0e:	9307      	strlt	r3, [sp, #28]
 8001e10:	bfb8      	it	lt
 8001e12:	9204      	strlt	r2, [sp, #16]
 8001e14:	7823      	ldrb	r3, [r4, #0]
 8001e16:	2b2e      	cmp	r3, #46	; 0x2e
 8001e18:	d10c      	bne.n	8001e34 <_svfiprintf_r+0x130>
 8001e1a:	7863      	ldrb	r3, [r4, #1]
 8001e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e1e:	d134      	bne.n	8001e8a <_svfiprintf_r+0x186>
 8001e20:	9b03      	ldr	r3, [sp, #12]
 8001e22:	3402      	adds	r4, #2
 8001e24:	1d1a      	adds	r2, r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	9203      	str	r2, [sp, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bfb8      	it	lt
 8001e2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e32:	9305      	str	r3, [sp, #20]
 8001e34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001ef0 <_svfiprintf_r+0x1ec>
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4650      	mov	r0, sl
 8001e3c:	7821      	ldrb	r1, [r4, #0]
 8001e3e:	f000 faf9 	bl	8002434 <memchr>
 8001e42:	b138      	cbz	r0, 8001e54 <_svfiprintf_r+0x150>
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	9b04      	ldr	r3, [sp, #16]
 8001e48:	eba0 000a 	sub.w	r0, r0, sl
 8001e4c:	4082      	lsls	r2, r0
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	3401      	adds	r4, #1
 8001e52:	9304      	str	r3, [sp, #16]
 8001e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e58:	2206      	movs	r2, #6
 8001e5a:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <_svfiprintf_r+0x1f0>)
 8001e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e60:	f000 fae8 	bl	8002434 <memchr>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d038      	beq.n	8001eda <_svfiprintf_r+0x1d6>
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <_svfiprintf_r+0x1f4>)
 8001e6a:	bb1b      	cbnz	r3, 8001eb4 <_svfiprintf_r+0x1b0>
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	f023 0307 	bic.w	r3, r3, #7
 8001e74:	3308      	adds	r3, #8
 8001e76:	9303      	str	r3, [sp, #12]
 8001e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e7a:	4433      	add	r3, r6
 8001e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e7e:	e768      	b.n	8001d52 <_svfiprintf_r+0x4e>
 8001e80:	460c      	mov	r4, r1
 8001e82:	2001      	movs	r0, #1
 8001e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e88:	e7a6      	b.n	8001dd8 <_svfiprintf_r+0xd4>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f04f 0c0a 	mov.w	ip, #10
 8001e90:	4619      	mov	r1, r3
 8001e92:	3401      	adds	r4, #1
 8001e94:	9305      	str	r3, [sp, #20]
 8001e96:	4620      	mov	r0, r4
 8001e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e9c:	3a30      	subs	r2, #48	; 0x30
 8001e9e:	2a09      	cmp	r2, #9
 8001ea0:	d903      	bls.n	8001eaa <_svfiprintf_r+0x1a6>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0c6      	beq.n	8001e34 <_svfiprintf_r+0x130>
 8001ea6:	9105      	str	r1, [sp, #20]
 8001ea8:	e7c4      	b.n	8001e34 <_svfiprintf_r+0x130>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	2301      	movs	r3, #1
 8001eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8001eb2:	e7f0      	b.n	8001e96 <_svfiprintf_r+0x192>
 8001eb4:	ab03      	add	r3, sp, #12
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	462a      	mov	r2, r5
 8001eba:	4638      	mov	r0, r7
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <_svfiprintf_r+0x1f8>)
 8001ebe:	a904      	add	r1, sp, #16
 8001ec0:	f3af 8000 	nop.w
 8001ec4:	1c42      	adds	r2, r0, #1
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	d1d6      	bne.n	8001e78 <_svfiprintf_r+0x174>
 8001eca:	89ab      	ldrh	r3, [r5, #12]
 8001ecc:	065b      	lsls	r3, r3, #25
 8001ece:	f53f af2d 	bmi.w	8001d2c <_svfiprintf_r+0x28>
 8001ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ed4:	b01d      	add	sp, #116	; 0x74
 8001ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eda:	ab03      	add	r3, sp, #12
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	462a      	mov	r2, r5
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <_svfiprintf_r+0x1f8>)
 8001ee4:	a904      	add	r1, sp, #16
 8001ee6:	f000 f91d 	bl	8002124 <_printf_i>
 8001eea:	e7eb      	b.n	8001ec4 <_svfiprintf_r+0x1c0>
 8001eec:	0800255e 	.word	0x0800255e
 8001ef0:	08002564 	.word	0x08002564
 8001ef4:	08002568 	.word	0x08002568
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	08001c51 	.word	0x08001c51

08001f00 <sbrk_aligned>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4e0e      	ldr	r6, [pc, #56]	; (8001f3c <sbrk_aligned+0x3c>)
 8001f04:	460c      	mov	r4, r1
 8001f06:	6831      	ldr	r1, [r6, #0]
 8001f08:	4605      	mov	r5, r0
 8001f0a:	b911      	cbnz	r1, 8001f12 <sbrk_aligned+0x12>
 8001f0c:	f000 fa82 	bl	8002414 <_sbrk_r>
 8001f10:	6030      	str	r0, [r6, #0]
 8001f12:	4621      	mov	r1, r4
 8001f14:	4628      	mov	r0, r5
 8001f16:	f000 fa7d 	bl	8002414 <_sbrk_r>
 8001f1a:	1c43      	adds	r3, r0, #1
 8001f1c:	d00a      	beq.n	8001f34 <sbrk_aligned+0x34>
 8001f1e:	1cc4      	adds	r4, r0, #3
 8001f20:	f024 0403 	bic.w	r4, r4, #3
 8001f24:	42a0      	cmp	r0, r4
 8001f26:	d007      	beq.n	8001f38 <sbrk_aligned+0x38>
 8001f28:	1a21      	subs	r1, r4, r0
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f000 fa72 	bl	8002414 <_sbrk_r>
 8001f30:	3001      	adds	r0, #1
 8001f32:	d101      	bne.n	8001f38 <sbrk_aligned+0x38>
 8001f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	20000250 	.word	0x20000250

08001f40 <_malloc_r>:
 8001f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f44:	1ccd      	adds	r5, r1, #3
 8001f46:	f025 0503 	bic.w	r5, r5, #3
 8001f4a:	3508      	adds	r5, #8
 8001f4c:	2d0c      	cmp	r5, #12
 8001f4e:	bf38      	it	cc
 8001f50:	250c      	movcc	r5, #12
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	4607      	mov	r7, r0
 8001f56:	db01      	blt.n	8001f5c <_malloc_r+0x1c>
 8001f58:	42a9      	cmp	r1, r5
 8001f5a:	d905      	bls.n	8001f68 <_malloc_r+0x28>
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	2600      	movs	r6, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4630      	mov	r0, r6
 8001f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800203c <_malloc_r+0xfc>
 8001f6c:	f000 f9fc 	bl	8002368 <__malloc_lock>
 8001f70:	f8d8 3000 	ldr.w	r3, [r8]
 8001f74:	461c      	mov	r4, r3
 8001f76:	bb5c      	cbnz	r4, 8001fd0 <_malloc_r+0x90>
 8001f78:	4629      	mov	r1, r5
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	f7ff ffc0 	bl	8001f00 <sbrk_aligned>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	4604      	mov	r4, r0
 8001f84:	d155      	bne.n	8002032 <_malloc_r+0xf2>
 8001f86:	f8d8 4000 	ldr.w	r4, [r8]
 8001f8a:	4626      	mov	r6, r4
 8001f8c:	2e00      	cmp	r6, #0
 8001f8e:	d145      	bne.n	800201c <_malloc_r+0xdc>
 8001f90:	2c00      	cmp	r4, #0
 8001f92:	d048      	beq.n	8002026 <_malloc_r+0xe6>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	4631      	mov	r1, r6
 8001f98:	4638      	mov	r0, r7
 8001f9a:	eb04 0903 	add.w	r9, r4, r3
 8001f9e:	f000 fa39 	bl	8002414 <_sbrk_r>
 8001fa2:	4581      	cmp	r9, r0
 8001fa4:	d13f      	bne.n	8002026 <_malloc_r+0xe6>
 8001fa6:	6821      	ldr	r1, [r4, #0]
 8001fa8:	4638      	mov	r0, r7
 8001faa:	1a6d      	subs	r5, r5, r1
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7ff ffa7 	bl	8001f00 <sbrk_aligned>
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d037      	beq.n	8002026 <_malloc_r+0xe6>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	442b      	add	r3, r5
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d038      	beq.n	8002036 <_malloc_r+0xf6>
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	42a2      	cmp	r2, r4
 8001fc8:	d12b      	bne.n	8002022 <_malloc_r+0xe2>
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e00f      	b.n	8001ff0 <_malloc_r+0xb0>
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	1b52      	subs	r2, r2, r5
 8001fd4:	d41f      	bmi.n	8002016 <_malloc_r+0xd6>
 8001fd6:	2a0b      	cmp	r2, #11
 8001fd8:	d917      	bls.n	800200a <_malloc_r+0xca>
 8001fda:	1961      	adds	r1, r4, r5
 8001fdc:	42a3      	cmp	r3, r4
 8001fde:	6025      	str	r5, [r4, #0]
 8001fe0:	bf18      	it	ne
 8001fe2:	6059      	strne	r1, [r3, #4]
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	bf08      	it	eq
 8001fe8:	f8c8 1000 	streq.w	r1, [r8]
 8001fec:	5162      	str	r2, [r4, r5]
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	f104 060b 	add.w	r6, r4, #11
 8001ff6:	f000 f9bd 	bl	8002374 <__malloc_unlock>
 8001ffa:	f026 0607 	bic.w	r6, r6, #7
 8001ffe:	1d23      	adds	r3, r4, #4
 8002000:	1af2      	subs	r2, r6, r3
 8002002:	d0ae      	beq.n	8001f62 <_malloc_r+0x22>
 8002004:	1b9b      	subs	r3, r3, r6
 8002006:	50a3      	str	r3, [r4, r2]
 8002008:	e7ab      	b.n	8001f62 <_malloc_r+0x22>
 800200a:	42a3      	cmp	r3, r4
 800200c:	6862      	ldr	r2, [r4, #4]
 800200e:	d1dd      	bne.n	8001fcc <_malloc_r+0x8c>
 8002010:	f8c8 2000 	str.w	r2, [r8]
 8002014:	e7ec      	b.n	8001ff0 <_malloc_r+0xb0>
 8002016:	4623      	mov	r3, r4
 8002018:	6864      	ldr	r4, [r4, #4]
 800201a:	e7ac      	b.n	8001f76 <_malloc_r+0x36>
 800201c:	4634      	mov	r4, r6
 800201e:	6876      	ldr	r6, [r6, #4]
 8002020:	e7b4      	b.n	8001f8c <_malloc_r+0x4c>
 8002022:	4613      	mov	r3, r2
 8002024:	e7cc      	b.n	8001fc0 <_malloc_r+0x80>
 8002026:	230c      	movs	r3, #12
 8002028:	4638      	mov	r0, r7
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	f000 f9a2 	bl	8002374 <__malloc_unlock>
 8002030:	e797      	b.n	8001f62 <_malloc_r+0x22>
 8002032:	6025      	str	r5, [r4, #0]
 8002034:	e7dc      	b.n	8001ff0 <_malloc_r+0xb0>
 8002036:	605b      	str	r3, [r3, #4]
 8002038:	deff      	udf	#255	; 0xff
 800203a:	bf00      	nop
 800203c:	2000024c 	.word	0x2000024c

08002040 <_printf_common>:
 8002040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002044:	4616      	mov	r6, r2
 8002046:	4699      	mov	r9, r3
 8002048:	688a      	ldr	r2, [r1, #8]
 800204a:	690b      	ldr	r3, [r1, #16]
 800204c:	4607      	mov	r7, r0
 800204e:	4293      	cmp	r3, r2
 8002050:	bfb8      	it	lt
 8002052:	4613      	movlt	r3, r2
 8002054:	6033      	str	r3, [r6, #0]
 8002056:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800205a:	460c      	mov	r4, r1
 800205c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002060:	b10a      	cbz	r2, 8002066 <_printf_common+0x26>
 8002062:	3301      	adds	r3, #1
 8002064:	6033      	str	r3, [r6, #0]
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	0699      	lsls	r1, r3, #26
 800206a:	bf42      	ittt	mi
 800206c:	6833      	ldrmi	r3, [r6, #0]
 800206e:	3302      	addmi	r3, #2
 8002070:	6033      	strmi	r3, [r6, #0]
 8002072:	6825      	ldr	r5, [r4, #0]
 8002074:	f015 0506 	ands.w	r5, r5, #6
 8002078:	d106      	bne.n	8002088 <_printf_common+0x48>
 800207a:	f104 0a19 	add.w	sl, r4, #25
 800207e:	68e3      	ldr	r3, [r4, #12]
 8002080:	6832      	ldr	r2, [r6, #0]
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	42ab      	cmp	r3, r5
 8002086:	dc2b      	bgt.n	80020e0 <_printf_common+0xa0>
 8002088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800208c:	1e13      	subs	r3, r2, #0
 800208e:	6822      	ldr	r2, [r4, #0]
 8002090:	bf18      	it	ne
 8002092:	2301      	movne	r3, #1
 8002094:	0692      	lsls	r2, r2, #26
 8002096:	d430      	bmi.n	80020fa <_printf_common+0xba>
 8002098:	4649      	mov	r1, r9
 800209a:	4638      	mov	r0, r7
 800209c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020a0:	47c0      	blx	r8
 80020a2:	3001      	adds	r0, #1
 80020a4:	d023      	beq.n	80020ee <_printf_common+0xae>
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	6922      	ldr	r2, [r4, #16]
 80020aa:	f003 0306 	and.w	r3, r3, #6
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf14      	ite	ne
 80020b2:	2500      	movne	r5, #0
 80020b4:	6833      	ldreq	r3, [r6, #0]
 80020b6:	f04f 0600 	mov.w	r6, #0
 80020ba:	bf08      	it	eq
 80020bc:	68e5      	ldreq	r5, [r4, #12]
 80020be:	f104 041a 	add.w	r4, r4, #26
 80020c2:	bf08      	it	eq
 80020c4:	1aed      	subeq	r5, r5, r3
 80020c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80020ca:	bf08      	it	eq
 80020cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bfc4      	itt	gt
 80020d4:	1a9b      	subgt	r3, r3, r2
 80020d6:	18ed      	addgt	r5, r5, r3
 80020d8:	42b5      	cmp	r5, r6
 80020da:	d11a      	bne.n	8002112 <_printf_common+0xd2>
 80020dc:	2000      	movs	r0, #0
 80020de:	e008      	b.n	80020f2 <_printf_common+0xb2>
 80020e0:	2301      	movs	r3, #1
 80020e2:	4652      	mov	r2, sl
 80020e4:	4649      	mov	r1, r9
 80020e6:	4638      	mov	r0, r7
 80020e8:	47c0      	blx	r8
 80020ea:	3001      	adds	r0, #1
 80020ec:	d103      	bne.n	80020f6 <_printf_common+0xb6>
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f6:	3501      	adds	r5, #1
 80020f8:	e7c1      	b.n	800207e <_printf_common+0x3e>
 80020fa:	2030      	movs	r0, #48	; 0x30
 80020fc:	18e1      	adds	r1, r4, r3
 80020fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002108:	4422      	add	r2, r4
 800210a:	3302      	adds	r3, #2
 800210c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002110:	e7c2      	b.n	8002098 <_printf_common+0x58>
 8002112:	2301      	movs	r3, #1
 8002114:	4622      	mov	r2, r4
 8002116:	4649      	mov	r1, r9
 8002118:	4638      	mov	r0, r7
 800211a:	47c0      	blx	r8
 800211c:	3001      	adds	r0, #1
 800211e:	d0e6      	beq.n	80020ee <_printf_common+0xae>
 8002120:	3601      	adds	r6, #1
 8002122:	e7d9      	b.n	80020d8 <_printf_common+0x98>

08002124 <_printf_i>:
 8002124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002128:	7e0f      	ldrb	r7, [r1, #24]
 800212a:	4691      	mov	r9, r2
 800212c:	2f78      	cmp	r7, #120	; 0x78
 800212e:	4680      	mov	r8, r0
 8002130:	460c      	mov	r4, r1
 8002132:	469a      	mov	sl, r3
 8002134:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800213a:	d807      	bhi.n	800214c <_printf_i+0x28>
 800213c:	2f62      	cmp	r7, #98	; 0x62
 800213e:	d80a      	bhi.n	8002156 <_printf_i+0x32>
 8002140:	2f00      	cmp	r7, #0
 8002142:	f000 80d5 	beq.w	80022f0 <_printf_i+0x1cc>
 8002146:	2f58      	cmp	r7, #88	; 0x58
 8002148:	f000 80c1 	beq.w	80022ce <_printf_i+0x1aa>
 800214c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002154:	e03a      	b.n	80021cc <_printf_i+0xa8>
 8002156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800215a:	2b15      	cmp	r3, #21
 800215c:	d8f6      	bhi.n	800214c <_printf_i+0x28>
 800215e:	a101      	add	r1, pc, #4	; (adr r1, 8002164 <_printf_i+0x40>)
 8002160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002164:	080021bd 	.word	0x080021bd
 8002168:	080021d1 	.word	0x080021d1
 800216c:	0800214d 	.word	0x0800214d
 8002170:	0800214d 	.word	0x0800214d
 8002174:	0800214d 	.word	0x0800214d
 8002178:	0800214d 	.word	0x0800214d
 800217c:	080021d1 	.word	0x080021d1
 8002180:	0800214d 	.word	0x0800214d
 8002184:	0800214d 	.word	0x0800214d
 8002188:	0800214d 	.word	0x0800214d
 800218c:	0800214d 	.word	0x0800214d
 8002190:	080022d7 	.word	0x080022d7
 8002194:	080021fd 	.word	0x080021fd
 8002198:	08002291 	.word	0x08002291
 800219c:	0800214d 	.word	0x0800214d
 80021a0:	0800214d 	.word	0x0800214d
 80021a4:	080022f9 	.word	0x080022f9
 80021a8:	0800214d 	.word	0x0800214d
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800214d 	.word	0x0800214d
 80021b4:	0800214d 	.word	0x0800214d
 80021b8:	08002299 	.word	0x08002299
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	602a      	str	r2, [r5, #0]
 80021c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0a0      	b.n	8002312 <_printf_i+0x1ee>
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	682b      	ldr	r3, [r5, #0]
 80021d4:	0607      	lsls	r7, r0, #24
 80021d6:	f103 0104 	add.w	r1, r3, #4
 80021da:	6029      	str	r1, [r5, #0]
 80021dc:	d501      	bpl.n	80021e2 <_printf_i+0xbe>
 80021de:	681e      	ldr	r6, [r3, #0]
 80021e0:	e003      	b.n	80021ea <_printf_i+0xc6>
 80021e2:	0646      	lsls	r6, r0, #25
 80021e4:	d5fb      	bpl.n	80021de <_printf_i+0xba>
 80021e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80021ea:	2e00      	cmp	r6, #0
 80021ec:	da03      	bge.n	80021f6 <_printf_i+0xd2>
 80021ee:	232d      	movs	r3, #45	; 0x2d
 80021f0:	4276      	negs	r6, r6
 80021f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021f6:	230a      	movs	r3, #10
 80021f8:	4859      	ldr	r0, [pc, #356]	; (8002360 <_printf_i+0x23c>)
 80021fa:	e012      	b.n	8002222 <_printf_i+0xfe>
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	1d19      	adds	r1, r3, #4
 8002202:	6029      	str	r1, [r5, #0]
 8002204:	0605      	lsls	r5, r0, #24
 8002206:	d501      	bpl.n	800220c <_printf_i+0xe8>
 8002208:	681e      	ldr	r6, [r3, #0]
 800220a:	e002      	b.n	8002212 <_printf_i+0xee>
 800220c:	0641      	lsls	r1, r0, #25
 800220e:	d5fb      	bpl.n	8002208 <_printf_i+0xe4>
 8002210:	881e      	ldrh	r6, [r3, #0]
 8002212:	2f6f      	cmp	r7, #111	; 0x6f
 8002214:	bf0c      	ite	eq
 8002216:	2308      	moveq	r3, #8
 8002218:	230a      	movne	r3, #10
 800221a:	4851      	ldr	r0, [pc, #324]	; (8002360 <_printf_i+0x23c>)
 800221c:	2100      	movs	r1, #0
 800221e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002222:	6865      	ldr	r5, [r4, #4]
 8002224:	2d00      	cmp	r5, #0
 8002226:	bfa8      	it	ge
 8002228:	6821      	ldrge	r1, [r4, #0]
 800222a:	60a5      	str	r5, [r4, #8]
 800222c:	bfa4      	itt	ge
 800222e:	f021 0104 	bicge.w	r1, r1, #4
 8002232:	6021      	strge	r1, [r4, #0]
 8002234:	b90e      	cbnz	r6, 800223a <_printf_i+0x116>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d04b      	beq.n	80022d2 <_printf_i+0x1ae>
 800223a:	4615      	mov	r5, r2
 800223c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002240:	fb03 6711 	mls	r7, r3, r1, r6
 8002244:	5dc7      	ldrb	r7, [r0, r7]
 8002246:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800224a:	4637      	mov	r7, r6
 800224c:	42bb      	cmp	r3, r7
 800224e:	460e      	mov	r6, r1
 8002250:	d9f4      	bls.n	800223c <_printf_i+0x118>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d10b      	bne.n	800226e <_printf_i+0x14a>
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	07de      	lsls	r6, r3, #31
 800225a:	d508      	bpl.n	800226e <_printf_i+0x14a>
 800225c:	6923      	ldr	r3, [r4, #16]
 800225e:	6861      	ldr	r1, [r4, #4]
 8002260:	4299      	cmp	r1, r3
 8002262:	bfde      	ittt	le
 8002264:	2330      	movle	r3, #48	; 0x30
 8002266:	f805 3c01 	strble.w	r3, [r5, #-1]
 800226a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800226e:	1b52      	subs	r2, r2, r5
 8002270:	6122      	str	r2, [r4, #16]
 8002272:	464b      	mov	r3, r9
 8002274:	4621      	mov	r1, r4
 8002276:	4640      	mov	r0, r8
 8002278:	f8cd a000 	str.w	sl, [sp]
 800227c:	aa03      	add	r2, sp, #12
 800227e:	f7ff fedf 	bl	8002040 <_printf_common>
 8002282:	3001      	adds	r0, #1
 8002284:	d14a      	bne.n	800231c <_printf_i+0x1f8>
 8002286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228a:	b004      	add	sp, #16
 800228c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	f043 0320 	orr.w	r3, r3, #32
 8002296:	6023      	str	r3, [r4, #0]
 8002298:	2778      	movs	r7, #120	; 0x78
 800229a:	4832      	ldr	r0, [pc, #200]	; (8002364 <_printf_i+0x240>)
 800229c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	6829      	ldr	r1, [r5, #0]
 80022a4:	061f      	lsls	r7, r3, #24
 80022a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80022aa:	d402      	bmi.n	80022b2 <_printf_i+0x18e>
 80022ac:	065f      	lsls	r7, r3, #25
 80022ae:	bf48      	it	mi
 80022b0:	b2b6      	uxthmi	r6, r6
 80022b2:	07df      	lsls	r7, r3, #31
 80022b4:	bf48      	it	mi
 80022b6:	f043 0320 	orrmi.w	r3, r3, #32
 80022ba:	6029      	str	r1, [r5, #0]
 80022bc:	bf48      	it	mi
 80022be:	6023      	strmi	r3, [r4, #0]
 80022c0:	b91e      	cbnz	r6, 80022ca <_printf_i+0x1a6>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	f023 0320 	bic.w	r3, r3, #32
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	2310      	movs	r3, #16
 80022cc:	e7a6      	b.n	800221c <_printf_i+0xf8>
 80022ce:	4824      	ldr	r0, [pc, #144]	; (8002360 <_printf_i+0x23c>)
 80022d0:	e7e4      	b.n	800229c <_printf_i+0x178>
 80022d2:	4615      	mov	r5, r2
 80022d4:	e7bd      	b.n	8002252 <_printf_i+0x12e>
 80022d6:	682b      	ldr	r3, [r5, #0]
 80022d8:	6826      	ldr	r6, [r4, #0]
 80022da:	1d18      	adds	r0, r3, #4
 80022dc:	6961      	ldr	r1, [r4, #20]
 80022de:	6028      	str	r0, [r5, #0]
 80022e0:	0635      	lsls	r5, r6, #24
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	d501      	bpl.n	80022ea <_printf_i+0x1c6>
 80022e6:	6019      	str	r1, [r3, #0]
 80022e8:	e002      	b.n	80022f0 <_printf_i+0x1cc>
 80022ea:	0670      	lsls	r0, r6, #25
 80022ec:	d5fb      	bpl.n	80022e6 <_printf_i+0x1c2>
 80022ee:	8019      	strh	r1, [r3, #0]
 80022f0:	2300      	movs	r3, #0
 80022f2:	4615      	mov	r5, r2
 80022f4:	6123      	str	r3, [r4, #16]
 80022f6:	e7bc      	b.n	8002272 <_printf_i+0x14e>
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	2100      	movs	r1, #0
 80022fc:	1d1a      	adds	r2, r3, #4
 80022fe:	602a      	str	r2, [r5, #0]
 8002300:	681d      	ldr	r5, [r3, #0]
 8002302:	6862      	ldr	r2, [r4, #4]
 8002304:	4628      	mov	r0, r5
 8002306:	f000 f895 	bl	8002434 <memchr>
 800230a:	b108      	cbz	r0, 8002310 <_printf_i+0x1ec>
 800230c:	1b40      	subs	r0, r0, r5
 800230e:	6060      	str	r0, [r4, #4]
 8002310:	6863      	ldr	r3, [r4, #4]
 8002312:	6123      	str	r3, [r4, #16]
 8002314:	2300      	movs	r3, #0
 8002316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800231a:	e7aa      	b.n	8002272 <_printf_i+0x14e>
 800231c:	462a      	mov	r2, r5
 800231e:	4649      	mov	r1, r9
 8002320:	4640      	mov	r0, r8
 8002322:	6923      	ldr	r3, [r4, #16]
 8002324:	47d0      	blx	sl
 8002326:	3001      	adds	r0, #1
 8002328:	d0ad      	beq.n	8002286 <_printf_i+0x162>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	079b      	lsls	r3, r3, #30
 800232e:	d413      	bmi.n	8002358 <_printf_i+0x234>
 8002330:	68e0      	ldr	r0, [r4, #12]
 8002332:	9b03      	ldr	r3, [sp, #12]
 8002334:	4298      	cmp	r0, r3
 8002336:	bfb8      	it	lt
 8002338:	4618      	movlt	r0, r3
 800233a:	e7a6      	b.n	800228a <_printf_i+0x166>
 800233c:	2301      	movs	r3, #1
 800233e:	4632      	mov	r2, r6
 8002340:	4649      	mov	r1, r9
 8002342:	4640      	mov	r0, r8
 8002344:	47d0      	blx	sl
 8002346:	3001      	adds	r0, #1
 8002348:	d09d      	beq.n	8002286 <_printf_i+0x162>
 800234a:	3501      	adds	r5, #1
 800234c:	68e3      	ldr	r3, [r4, #12]
 800234e:	9903      	ldr	r1, [sp, #12]
 8002350:	1a5b      	subs	r3, r3, r1
 8002352:	42ab      	cmp	r3, r5
 8002354:	dcf2      	bgt.n	800233c <_printf_i+0x218>
 8002356:	e7eb      	b.n	8002330 <_printf_i+0x20c>
 8002358:	2500      	movs	r5, #0
 800235a:	f104 0619 	add.w	r6, r4, #25
 800235e:	e7f5      	b.n	800234c <_printf_i+0x228>
 8002360:	0800256f 	.word	0x0800256f
 8002364:	08002580 	.word	0x08002580

08002368 <__malloc_lock>:
 8002368:	4801      	ldr	r0, [pc, #4]	; (8002370 <__malloc_lock+0x8>)
 800236a:	f7ff bc6f 	b.w	8001c4c <__retarget_lock_acquire_recursive>
 800236e:	bf00      	nop
 8002370:	20000248 	.word	0x20000248

08002374 <__malloc_unlock>:
 8002374:	4801      	ldr	r0, [pc, #4]	; (800237c <__malloc_unlock+0x8>)
 8002376:	f7ff bc6a 	b.w	8001c4e <__retarget_lock_release_recursive>
 800237a:	bf00      	nop
 800237c:	20000248 	.word	0x20000248

08002380 <_realloc_r>:
 8002380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002384:	4680      	mov	r8, r0
 8002386:	4614      	mov	r4, r2
 8002388:	460e      	mov	r6, r1
 800238a:	b921      	cbnz	r1, 8002396 <_realloc_r+0x16>
 800238c:	4611      	mov	r1, r2
 800238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002392:	f7ff bdd5 	b.w	8001f40 <_malloc_r>
 8002396:	b92a      	cbnz	r2, 80023a4 <_realloc_r+0x24>
 8002398:	f000 f868 	bl	800246c <_free_r>
 800239c:	4625      	mov	r5, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a4:	f000 f8aa 	bl	80024fc <_malloc_usable_size_r>
 80023a8:	4284      	cmp	r4, r0
 80023aa:	4607      	mov	r7, r0
 80023ac:	d802      	bhi.n	80023b4 <_realloc_r+0x34>
 80023ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80023b2:	d812      	bhi.n	80023da <_realloc_r+0x5a>
 80023b4:	4621      	mov	r1, r4
 80023b6:	4640      	mov	r0, r8
 80023b8:	f7ff fdc2 	bl	8001f40 <_malloc_r>
 80023bc:	4605      	mov	r5, r0
 80023be:	2800      	cmp	r0, #0
 80023c0:	d0ed      	beq.n	800239e <_realloc_r+0x1e>
 80023c2:	42bc      	cmp	r4, r7
 80023c4:	4622      	mov	r2, r4
 80023c6:	4631      	mov	r1, r6
 80023c8:	bf28      	it	cs
 80023ca:	463a      	movcs	r2, r7
 80023cc:	f000 f840 	bl	8002450 <memcpy>
 80023d0:	4631      	mov	r1, r6
 80023d2:	4640      	mov	r0, r8
 80023d4:	f000 f84a 	bl	800246c <_free_r>
 80023d8:	e7e1      	b.n	800239e <_realloc_r+0x1e>
 80023da:	4635      	mov	r5, r6
 80023dc:	e7df      	b.n	800239e <_realloc_r+0x1e>

080023de <memmove>:
 80023de:	4288      	cmp	r0, r1
 80023e0:	b510      	push	{r4, lr}
 80023e2:	eb01 0402 	add.w	r4, r1, r2
 80023e6:	d902      	bls.n	80023ee <memmove+0x10>
 80023e8:	4284      	cmp	r4, r0
 80023ea:	4623      	mov	r3, r4
 80023ec:	d807      	bhi.n	80023fe <memmove+0x20>
 80023ee:	1e43      	subs	r3, r0, #1
 80023f0:	42a1      	cmp	r1, r4
 80023f2:	d008      	beq.n	8002406 <memmove+0x28>
 80023f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023fc:	e7f8      	b.n	80023f0 <memmove+0x12>
 80023fe:	4601      	mov	r1, r0
 8002400:	4402      	add	r2, r0
 8002402:	428a      	cmp	r2, r1
 8002404:	d100      	bne.n	8002408 <memmove+0x2a>
 8002406:	bd10      	pop	{r4, pc}
 8002408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800240c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002410:	e7f7      	b.n	8002402 <memmove+0x24>
	...

08002414 <_sbrk_r>:
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	2300      	movs	r3, #0
 8002418:	4d05      	ldr	r5, [pc, #20]	; (8002430 <_sbrk_r+0x1c>)
 800241a:	4604      	mov	r4, r0
 800241c:	4608      	mov	r0, r1
 800241e:	602b      	str	r3, [r5, #0]
 8002420:	f7fe fa86 	bl	8000930 <_sbrk>
 8002424:	1c43      	adds	r3, r0, #1
 8002426:	d102      	bne.n	800242e <_sbrk_r+0x1a>
 8002428:	682b      	ldr	r3, [r5, #0]
 800242a:	b103      	cbz	r3, 800242e <_sbrk_r+0x1a>
 800242c:	6023      	str	r3, [r4, #0]
 800242e:	bd38      	pop	{r3, r4, r5, pc}
 8002430:	20000254 	.word	0x20000254

08002434 <memchr>:
 8002434:	4603      	mov	r3, r0
 8002436:	b510      	push	{r4, lr}
 8002438:	b2c9      	uxtb	r1, r1
 800243a:	4402      	add	r2, r0
 800243c:	4293      	cmp	r3, r2
 800243e:	4618      	mov	r0, r3
 8002440:	d101      	bne.n	8002446 <memchr+0x12>
 8002442:	2000      	movs	r0, #0
 8002444:	e003      	b.n	800244e <memchr+0x1a>
 8002446:	7804      	ldrb	r4, [r0, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	428c      	cmp	r4, r1
 800244c:	d1f6      	bne.n	800243c <memchr+0x8>
 800244e:	bd10      	pop	{r4, pc}

08002450 <memcpy>:
 8002450:	440a      	add	r2, r1
 8002452:	4291      	cmp	r1, r2
 8002454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002458:	d100      	bne.n	800245c <memcpy+0xc>
 800245a:	4770      	bx	lr
 800245c:	b510      	push	{r4, lr}
 800245e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002462:	4291      	cmp	r1, r2
 8002464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002468:	d1f9      	bne.n	800245e <memcpy+0xe>
 800246a:	bd10      	pop	{r4, pc}

0800246c <_free_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4605      	mov	r5, r0
 8002470:	2900      	cmp	r1, #0
 8002472:	d040      	beq.n	80024f6 <_free_r+0x8a>
 8002474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002478:	1f0c      	subs	r4, r1, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfb8      	it	lt
 800247e:	18e4      	addlt	r4, r4, r3
 8002480:	f7ff ff72 	bl	8002368 <__malloc_lock>
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <_free_r+0x8c>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	b933      	cbnz	r3, 8002498 <_free_r+0x2c>
 800248a:	6063      	str	r3, [r4, #4]
 800248c:	6014      	str	r4, [r2, #0]
 800248e:	4628      	mov	r0, r5
 8002490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002494:	f7ff bf6e 	b.w	8002374 <__malloc_unlock>
 8002498:	42a3      	cmp	r3, r4
 800249a:	d908      	bls.n	80024ae <_free_r+0x42>
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	1821      	adds	r1, r4, r0
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1809      	addeq	r1, r1, r0
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	e7ed      	b.n	800248a <_free_r+0x1e>
 80024ae:	461a      	mov	r2, r3
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b10b      	cbz	r3, 80024b8 <_free_r+0x4c>
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	d9fa      	bls.n	80024ae <_free_r+0x42>
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	1850      	adds	r0, r2, r1
 80024bc:	42a0      	cmp	r0, r4
 80024be:	d10b      	bne.n	80024d8 <_free_r+0x6c>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	4401      	add	r1, r0
 80024c4:	1850      	adds	r0, r2, r1
 80024c6:	4283      	cmp	r3, r0
 80024c8:	6011      	str	r1, [r2, #0]
 80024ca:	d1e0      	bne.n	800248e <_free_r+0x22>
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4408      	add	r0, r1
 80024d2:	6010      	str	r0, [r2, #0]
 80024d4:	6053      	str	r3, [r2, #4]
 80024d6:	e7da      	b.n	800248e <_free_r+0x22>
 80024d8:	d902      	bls.n	80024e0 <_free_r+0x74>
 80024da:	230c      	movs	r3, #12
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	e7d6      	b.n	800248e <_free_r+0x22>
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	1821      	adds	r1, r4, r0
 80024e4:	428b      	cmp	r3, r1
 80024e6:	bf01      	itttt	eq
 80024e8:	6819      	ldreq	r1, [r3, #0]
 80024ea:	685b      	ldreq	r3, [r3, #4]
 80024ec:	1809      	addeq	r1, r1, r0
 80024ee:	6021      	streq	r1, [r4, #0]
 80024f0:	6063      	str	r3, [r4, #4]
 80024f2:	6054      	str	r4, [r2, #4]
 80024f4:	e7cb      	b.n	800248e <_free_r+0x22>
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	2000024c 	.word	0x2000024c

080024fc <_malloc_usable_size_r>:
 80024fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002500:	1f18      	subs	r0, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	bfbc      	itt	lt
 8002506:	580b      	ldrlt	r3, [r1, r0]
 8002508:	18c0      	addlt	r0, r0, r3
 800250a:	4770      	bx	lr

0800250c <_init>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr

08002518 <_fini>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr
